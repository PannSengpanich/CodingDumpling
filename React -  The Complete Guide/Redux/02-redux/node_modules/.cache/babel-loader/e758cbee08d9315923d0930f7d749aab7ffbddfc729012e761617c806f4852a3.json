{"ast":null,"code":"var _jsxFileName = \"/Users/pannsengpanich/repos/CodingDumpling/React -  The Complete Guide/Redux/02-redux/src/components/Counter.js\",\n  _s = $RefreshSig$();\nimport Component from \"react\";\nimport { counterActions } from \"../store\";\nimport classes from \"./Counter.module.css\";\n\n// useSelector: allows functional components to access data from the Redux store's state\n// accept selector function as arg, return selected data from the store\n// useDispatch: a way to access the dispatch function, trigger state updates in the Redux store\n// connect: connect class-based components to Redux (function comp can also be used), is a Higher-Order Component\n\n// Component rerender when store's state is updated\nimport { useSelector, useDispatch, connect } from \"react-redux\";\n\n//! FUNCTION-BASED\n//will be re-rendered when there are changes in redux store\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Counter = () => {\n  _s();\n  //dispatch an action to our redux store\n  const dispatch = useDispatch();\n  const counter = useSelector(state => state.counter);\n  const show = useSelector(state => state.showCounter);\n  const incrementHandler = () => {\n    dispatch(counterActions.increment());\n  };\n  const increaseHandler = () => {\n    dispatch({\n      type: \"increase\",\n      amount: 5\n    });\n  };\n  const decrementHandler = () => {\n    dispatch({\n      type: \"decrement\"\n    });\n  };\n  const toggleCounterHandler = () => {\n    dispatch({\n      type: \"toggle\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.counter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Redux Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), show ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.value,\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 15\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incrementHandler,\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increaseHandler,\n        children: \"Increase by 5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decrementHandler,\n        children: \"Decrement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCounterHandler,\n      children: \"Toggle Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n//! CLASS-BASED\n// class CounterClass extends Component {\n//   // 'this.props' object contains the data and functions mapped from mapStateToProps and mapDispatchToProps.\n\n//   incrementHandler() {\n//     this.props.increment();\n//   }\n//   decrementHandler() {\n//     this.props.decrement();\n//   }\n//   toggleCounterHandler() {}\n//   render() {\n//     return (\n//       <main className={classes.counter}>\n//         <h1>Redux Counter</h1>\n//         {this.props.show ? (\n//           <div className={classes.value}>{this.props.counter}</div>\n//         ) : (\n//           <></>\n//         )}\n//         <div>\n//           <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n//           <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n//         </div>\n//         <button onClick={this.toggleCounterHandler.bind(this)}>\n//           Toggle Counter\n//         </button>\n//       </main>\n//     );\n//   }\n// }\n\n// //* ~ useSelector\n// // map redux state to props, will be received in the component\n// const mapStateToProps = (state) => {\n//   return { counter: state.counter, show: state.showCounter };\n// };\n\n// //* ~ useDispatch\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     increment: () => dispatch({ type: \"increment\" }),\n//     decrement: () => dispatch({ type: \"decrement\" }),\n//   };\n// };\n// export default connect(mapStateToProps,mapDispatchToProps)(CounterClass);\n_s(Counter, \"a6W6bcAuHVADZPU2xn93xNQZltc=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Counter;\nexport default Counter;\nvar _c;\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"names":["Component","counterActions","classes","useSelector","useDispatch","connect","jsxDEV","_jsxDEV","Fragment","_Fragment","Counter","_s","dispatch","counter","state","show","showCounter","incrementHandler","increment","increaseHandler","type","amount","decrementHandler","toggleCounterHandler","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onClick","_c","$RefreshReg$"],"sources":["/Users/pannsengpanich/repos/CodingDumpling/React -  The Complete Guide/Redux/02-redux/src/components/Counter.js"],"sourcesContent":["import Component from \"react\";\nimport { counterActions } from \"../store\";\nimport classes from \"./Counter.module.css\";\n\n// useSelector: allows functional components to access data from the Redux store's state\n// accept selector function as arg, return selected data from the store\n// useDispatch: a way to access the dispatch function, trigger state updates in the Redux store\n// connect: connect class-based components to Redux (function comp can also be used), is a Higher-Order Component\n\n// Component rerender when store's state is updated\nimport { useSelector, useDispatch, connect } from \"react-redux\";\n\n//! FUNCTION-BASED\n//will be re-rendered when there are changes in redux store\nconst Counter = () => {\n  //dispatch an action to our redux store\n  const dispatch = useDispatch();\n\n  const counter = useSelector((state) => state.counter);\n  const show = useSelector((state) => state.showCounter);\n\n  const incrementHandler = () => {\n    dispatch(counterActions.increment());\n  };\n  const increaseHandler = () => {\n    dispatch({ type: \"increase\", amount: 5 });\n  };\n  const decrementHandler = () => {\n    dispatch({ type: \"decrement\" });\n  };\n  const toggleCounterHandler = () => {\n    dispatch({ type: \"toggle\" });\n  };\n\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      {show ? <div className={classes.value}>{counter}</div> : <></>}\n      <div>\n        <button onClick={incrementHandler}>Increment</button>\n        <button onClick={increaseHandler}>Increase by 5</button>\n        <button onClick={decrementHandler}>Decrement</button>\n      </div>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};\n\n//! CLASS-BASED\n// class CounterClass extends Component {\n//   // 'this.props' object contains the data and functions mapped from mapStateToProps and mapDispatchToProps.\n\n//   incrementHandler() {\n//     this.props.increment();\n//   }\n//   decrementHandler() {\n//     this.props.decrement();\n//   }\n//   toggleCounterHandler() {}\n//   render() {\n//     return (\n//       <main className={classes.counter}>\n//         <h1>Redux Counter</h1>\n//         {this.props.show ? (\n//           <div className={classes.value}>{this.props.counter}</div>\n//         ) : (\n//           <></>\n//         )}\n//         <div>\n//           <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n//           <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n//         </div>\n//         <button onClick={this.toggleCounterHandler.bind(this)}>\n//           Toggle Counter\n//         </button>\n//       </main>\n//     );\n//   }\n// }\n\n// //* ~ useSelector\n// // map redux state to props, will be received in the component\n// const mapStateToProps = (state) => {\n//   return { counter: state.counter, show: state.showCounter };\n// };\n\n// //* ~ useDispatch\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     increment: () => dispatch({ type: \"increment\" }),\n//     decrement: () => dispatch({ type: \"decrement\" }),\n//   };\n// };\n// export default connect(mapStateToProps,mapDispatchToProps)(CounterClass);\nexport default Counter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}