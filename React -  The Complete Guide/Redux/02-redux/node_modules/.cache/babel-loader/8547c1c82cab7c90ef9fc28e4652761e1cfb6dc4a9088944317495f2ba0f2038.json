{"ast":null,"code":"import { createSlice, configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nconst initialState1 = {\n  counter: 1,\n  showCounter: true\n};\nlet combineCounter = 0;\nfunction addCombineCounter() {\n  combineCounter++;\n}\n// can mutate the state unlike using reducer function\nconst counterSlice1 = createSlice({\n  name: \"counter1\",\n  initialState: initialState1,\n  reducers: {\n    // receive current state and action as first and second parameter\n    increment(state) {\n      state.counter++;\n      addCombineCounter();\n      console.log(combineCounter);\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst counterSlice2 = createSlice({\n  name: \"counter2\",\n  initialState: initialState1,\n  reducers: {\n    // receive current state and action as first and second parameter\n    double(state) {\n      addCombineCounter();\n      console.log(combineCounter);\n      state.counter = state.counter * 2;\n    },\n    half(state) {\n      state.counter = state.counter / 2;\n    },\n    modifiedCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst rootReducer = combineReducers({\n  counter1: counterSlice1.reducer,\n  counter2: counterSlice2.reducer\n});\nconst store = configureStore({\n  reducer: rootReducer\n});\nexport const counterActions1 = counterSlice1.actions;\nexport const counterActions2 = counterSlice2.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","combineReducers","composeWithDevTools","initialState1","counter","showCounter","combineCounter","addCombineCounter","counterSlice1","name","initialState","reducers","increment","state","console","log","decrement","increase","action","payload","toggleCounter","counterSlice2","double","half","modifiedCounter","rootReducer","counter1","reducer","counter2","store","counterActions1","actions","counterActions2"],"sources":["/Users/pannsengpanich/repos/CodingDumpling/React -  The Complete Guide/Redux/02-redux/src/store/index.js"],"sourcesContent":["import { createSlice, configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst initialState1 = { counter: 1, showCounter: true };\nlet combineCounter = 0;\nfunction addCombineCounter() {\n  combineCounter++;\n}\n// can mutate the state unlike using reducer function\nconst counterSlice1 = createSlice({\n  name: \"counter1\",\n  initialState: initialState1,\n  reducers: {\n    // receive current state and action as first and second parameter\n    increment(state) {\n      state.counter++;\n      addCombineCounter();\n      console.log(combineCounter);\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\nconst counterSlice2 = createSlice({\n  name: \"counter2\",\n  initialState: initialState1,\n  reducers: {\n    // receive current state and action as first and second parameter\n    double(state) {\n      addCombineCounter();\n      console.log(combineCounter);\n      state.counter = state.counter * 2;\n    },\n    half(state) {\n      state.counter = state.counter / 2;\n    },\n    modifiedCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\nconst rootReducer = combineReducers({\n  counter1: counterSlice1.reducer,\n  counter2: counterSlice2.reducer,\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport const counterActions1 = counterSlice1.actions;\nexport const counterActions2 = counterSlice2.actions;\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,cAAc,EAAEC,eAAe,QAAQ,kBAAkB;AAC/E,SAASC,mBAAmB,QAAQ,0BAA0B;AAE9D,MAAMC,aAAa,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AACvD,IAAIC,cAAc,GAAG,CAAC;AACtB,SAASC,iBAAiBA,CAAA,EAAG;EAC3BD,cAAc,EAAE;AAClB;AACA;AACA,MAAME,aAAa,GAAGT,WAAW,CAAC;EAChCU,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAEP,aAAa;EAC3BQ,QAAQ,EAAE;IACR;IACAC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACT,OAAO,EAAE;MACfG,iBAAiB,CAAC,CAAC;MACnBO,OAAO,CAACC,GAAG,CAACT,cAAc,CAAC;IAC7B,CAAC;IACDU,SAASA,CAACH,KAAK,EAAE;MACfA,KAAK,CAACT,OAAO,EAAE;IACjB,CAAC;IACDa,QAAQA,CAACJ,KAAK,EAAEK,MAAM,EAAE;MACtBL,KAAK,CAACT,OAAO,GAAGS,KAAK,CAACT,OAAO,GAAGc,MAAM,CAACC,OAAO;IAChD,CAAC;IACDC,aAAaA,CAACP,KAAK,EAAE;MACnBA,KAAK,CAACR,WAAW,GAAG,CAACQ,KAAK,CAACR,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AACF,MAAMgB,aAAa,GAAGtB,WAAW,CAAC;EAChCU,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAEP,aAAa;EAC3BQ,QAAQ,EAAE;IACR;IACAW,MAAMA,CAACT,KAAK,EAAE;MACZN,iBAAiB,CAAC,CAAC;MACnBO,OAAO,CAACC,GAAG,CAACT,cAAc,CAAC;MAC3BO,KAAK,CAACT,OAAO,GAAGS,KAAK,CAACT,OAAO,GAAG,CAAC;IACnC,CAAC;IACDmB,IAAIA,CAACV,KAAK,EAAE;MACVA,KAAK,CAACT,OAAO,GAAGS,KAAK,CAACT,OAAO,GAAG,CAAC;IACnC,CAAC;IACDoB,eAAeA,CAACX,KAAK,EAAE;MACrBA,KAAK,CAACR,WAAW,GAAG,CAACQ,KAAK,CAACR,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAEF,MAAMoB,WAAW,GAAGxB,eAAe,CAAC;EAClCyB,QAAQ,EAAElB,aAAa,CAACmB,OAAO;EAC/BC,QAAQ,EAAEP,aAAa,CAACM;AAC1B,CAAC,CAAC;AAEF,MAAME,KAAK,GAAG7B,cAAc,CAAC;EAC3B2B,OAAO,EAAEF;AACX,CAAC,CAAC;AAEF,OAAO,MAAMK,eAAe,GAAGtB,aAAa,CAACuB,OAAO;AACpD,OAAO,MAAMC,eAAe,GAAGX,aAAa,CAACU,OAAO;AACpD,eAAeF,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}